export = DiscordBot;
declare class DiscordBot extends Discord.Client<boolean> {
    constructor(props: any);
    logger: Logger;
    commands: Discord.Collection<any, any>;
    fcmListeners: Object;
    fcmListenersLite: Object;
    instances: {};
    guildIntl: {};
    botIntl: FormatJS.IntlShape<string>;
    enIntl: FormatJS.IntlShape<string>;
    enMessages: any;
    rustplusInstances: Object;
    activeRustplusInstances: Object;
    rustplusReconnectTimers: Object;
    rustplusLiteReconnectTimers: Object;
    rustplusReconnecting: Object;
    rustplusMaps: Object;
    uptimeBot: any;
    items: Items;
    rustlabs: RustLabs;
    cctv: Cctv;
    pollingIntervalMs: string | number;
    battlemetricsInstances: Object;
    battlemetricsIntervalId: any;
    battlemetricsIntervalCounter: number;
    voiceLeaveTimeouts: Object;
    loadDiscordCommands(): void;
    loadDiscordEvents(): void;
    loadEnIntl(): void;
    loadBotIntl(): void;
    loadGuildIntl(guildId: any): void;
    loadGuildsIntl(): void;
    intlGet(guildId: any, id: any, variables?: {}): any;
    build(): void;
    log(title: any, text: any, level?: string): void;
    logInteraction(interaction: any, verifyId: any, type: any): void;
    setupGuild(guild: any): Promise<void>;
    syncCredentialsWithUsers(guild: any): Promise<void>;
    getInstance(guildId: any): any;
    setInstance(guildId: any, instance: any): void;
    readNotificationSettingsTemplate(): any;
    readGeneralSettingsTemplate(): any;
    createRustplusInstance(guildId: any, serverIp: any, appPort: any, steamId: any, playerToken: any): RustPlus;
    createRustplusInstancesFromConfig(): void;
    resetRustplusVariables(guildId: any): void;
    isJpgImageChanged(guildId: any, map: any): boolean;
    findAvailableTrackerId(guildId: any): number;
    findAvailableGroupId(guildId: any, serverId: any): number;
    /**
     *  Check if Battlemetrics instances are missing/not required/need update.
     */
    updateBattlemetricsInstances(): Promise<void>;
    interactionReply(interaction: any, content: any): Promise<any>;
    interactionEditReply(interaction: any, content: any): Promise<any>;
    interactionUpdate(interaction: any, content: any): Promise<any>;
    messageEdit(message: any, content: any): Promise<any>;
    messageSend(channel: any, content: any): Promise<any>;
    messageReply(message: any, content: any): Promise<any>;
    validatePermissions(interaction: any): Promise<boolean>;
    isAdministrator(interaction: any): any;
}
import Discord = require("discord.js");
import Logger = require("./Logger.js");
import FormatJS = require("@formatjs/intl");
import Items = require("./Items");
import RustLabs = require("../structures/RustLabs");
import Cctv = require("./Cctv");
import RustPlus = require("../structures/RustPlus");
